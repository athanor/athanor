$ Objective (in lexical ordering):
$       - Maximising the number of instances covered by the schedule
$       - Minimising the average solving time across all covered instances
$       - Minimising the total schedule's time
$ In a basic model, only the first objective is activated for optimisation

given streamliners new type enum
given instances new type enum
given timelimit: int
given solving_time: function (total) (streamliners,instances) --> int(1..timelimit+1) $ solving time (timelimit+1) means UNSAT

letting n_streamliners be |`streamliners`|
letting n_instances be |`instances`|

letting streamliner_time be domain record {
    streamliner: streamliners,
    time: int(1..timelimit)
}

$ sequence of streamliners chosen in the schedule
find schedule: sequence (maxSize n_streamliners) of streamliner_time

$ total assigned time to the schedule must be within timelimit
such that sum([st[time] | (_,st) <- schedule]) <= timelimit

$ for each instance, find the index of the first streamliner in the schedule that can solve it within the assigned time
find first_solve: function (total) instances --> int(0..n_streamliners) $ 0 means not solved
such that
    and([si=catchUndef(min([index | (index,st) <- schedule, solving_time((st[streamliner],instance))<=st[time]]), 0) | (instance,si) <- first_solve]) 

$ the number of instances covered by the schedule
find n_covered_instances: int(1..n_instances)
such that n_covered_instances = sum([toInt(i>0) | (_,i) <- first_solve])

$ schedule's solving time on each instance it covers
find schedule_solving_time: function (total) instances --> int(1..timelimit)
such that
    and([(t = sum([schedule(i)[time] | i:int(1..n_streamliners), i<first_solve(instance)]) +  solving_time((schedule(first_solve(instance))[streamliner],instance)))  | (instance, t) <- schedule_solving_time, first_solve(instance)>0])

$ expected solving time across all instance covered
find expected_solving_time: int(1..timelimit)
such that
    expected_solving_time = sum([time | (instance,time) <- schedule_solving_time, first_solve(instance)>0]) / n_covered_instances
	
$ total assigned time to the schedule
find schedule_total_time: int(1..timelimit)
such that schedule_total_time = sum([st[time] | (_,st) <- schedule])

$ optimise three objectives in lexical order
maximising (n_covered_instances, -expected_solving_time, -schedule_total_time)	
